/*
 * This file is generated by jOOQ.
 */
package com.exigent.verifycore.db.jooq.tables;


import com.exigent.verifycore.db.jooq.DefaultSchema;
import com.exigent.verifycore.db.jooq.Indexes;
import com.exigent.verifycore.db.jooq.Keys;
import com.exigent.verifycore.db.jooq.tables.records.PersonaRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persona extends TableImpl<PersonaRecord> {

    private static final long serialVersionUID = 168751728;

    /**
     * The reference instance of <code>persona</code>
     */
    public static final Persona PERSONA = new Persona();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonaRecord> getRecordType() {
        return PersonaRecord.class;
    }

    /**
     * The column <code>persona.id</code>.
     */
    public final TableField<PersonaRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>persona.externalId</code>.
     */
    public final TableField<PersonaRecord, String> EXTERNALID = createField(DSL.name("externalId"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>persona.firstName</code>.
     */
    public final TableField<PersonaRecord, String> FIRSTNAME = createField(DSL.name("firstName"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>persona.lastName</code>.
     */
    public final TableField<PersonaRecord, String> LASTNAME = createField(DSL.name("lastName"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>persona.otherName</code>.
     */
    public final TableField<PersonaRecord, String> OTHERNAME = createField(DSL.name("otherName"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>persona</code> table reference
     */
    public Persona() {
        this(DSL.name("persona"), null);
    }

    /**
     * Create an aliased <code>persona</code> table reference
     */
    public Persona(String alias) {
        this(DSL.name(alias), PERSONA);
    }

    /**
     * Create an aliased <code>persona</code> table reference
     */
    public Persona(Name alias) {
        this(alias, PERSONA);
    }

    private Persona(Name alias, Table<PersonaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persona(Name alias, Table<PersonaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Persona(Table<O> child, ForeignKey<O, PersonaRecord> key) {
        super(child, key, PERSONA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSONA_PRIMARY);
    }

    @Override
    public Identity<PersonaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PERSONA;
    }

    @Override
    public UniqueKey<PersonaRecord> getPrimaryKey() {
        return Keys.KEY_PERSONA_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonaRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonaRecord>>asList(Keys.KEY_PERSONA_PRIMARY);
    }

    @Override
    public Persona as(String alias) {
        return new Persona(DSL.name(alias), this);
    }

    @Override
    public Persona as(Name alias) {
        return new Persona(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persona rename(String name) {
        return new Persona(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persona rename(Name name) {
        return new Persona(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
