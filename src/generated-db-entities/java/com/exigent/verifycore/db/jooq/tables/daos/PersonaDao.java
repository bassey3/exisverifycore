/*
 * This file is generated by jOOQ.
 */
package com.exigent.verifycore.db.jooq.tables.daos;


import com.exigent.verifycore.db.jooq.tables.Persona;
import com.exigent.verifycore.db.jooq.tables.records.PersonaRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class PersonaDao extends DAOImpl<PersonaRecord, com.exigent.verifycore.db.jooq.tables.pojos.Persona, Integer> {

    /**
     * Create a new PersonaDao without any configuration
     */
    public PersonaDao() {
        super(Persona.PERSONA, com.exigent.verifycore.db.jooq.tables.pojos.Persona.class);
    }

    /**
     * Create a new PersonaDao with an attached configuration
     */
    @Autowired
    public PersonaDao(Configuration configuration) {
        super(Persona.PERSONA, com.exigent.verifycore.db.jooq.tables.pojos.Persona.class, configuration);
    }

    @Override
    public Integer getId(com.exigent.verifycore.db.jooq.tables.pojos.Persona object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Persona.PERSONA.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchById(Integer... values) {
        return fetch(Persona.PERSONA.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.exigent.verifycore.db.jooq.tables.pojos.Persona fetchOneById(Integer value) {
        return fetchOne(Persona.PERSONA.ID, value);
    }

    /**
     * Fetch records that have <code>externalId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchRangeOfExternalid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Persona.PERSONA.EXTERNALID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>externalId IN (values)</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchByExternalid(String... values) {
        return fetch(Persona.PERSONA.EXTERNALID, values);
    }

    /**
     * Fetch records that have <code>firstName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Persona.PERSONA.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstName IN (values)</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchByFirstname(String... values) {
        return fetch(Persona.PERSONA.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Persona.PERSONA.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastName IN (values)</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchByLastname(String... values) {
        return fetch(Persona.PERSONA.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>otherName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchRangeOfOthername(String lowerInclusive, String upperInclusive) {
        return fetchRange(Persona.PERSONA.OTHERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>otherName IN (values)</code>
     */
    public List<com.exigent.verifycore.db.jooq.tables.pojos.Persona> fetchByOthername(String... values) {
        return fetch(Persona.PERSONA.OTHERNAME, values);
    }
}
